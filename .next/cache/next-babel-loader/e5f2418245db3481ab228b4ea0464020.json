{"ast":null,"code":"import dbConnect from '../../../../utils/dbConnect';\nimport Note from '../../../../models/Note';\ndbConnect();\nexport default (async (req, res) => {\n  const {\n    query: {\n      id\n    },\n    method\n  } = req;\n\n  switch (method) {\n    case 'GET':\n      try {\n        const note = await Note.findById(id);\n\n        if (!note) {\n          return res.status(400).json({\n            success: false\n          });\n        }\n\n        res.status(200).json({\n          success: true,\n          date: note\n        });\n      } catch (error) {\n        return res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case 'PUT':\n      try {\n        const note = await Note.findByIdAndUpdate(id, req.body, {\n          new: true,\n          runValidators: true\n        });\n\n        if (!note) {\n          return res.status(400).json({\n            success: false\n          });\n        }\n\n        res.status(200).json({\n          success: true,\n          date: note\n        });\n      } catch (error) {\n        return res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case 'DELETE':\n      try {\n        const deletedNote = await Note.deleteOne({\n          _id: id\n        });\n\n        if (!deletedNote) {\n          return res.status(400).json({\n            success: false\n          });\n        }\n\n        res.status(200).json({\n          success: true,\n          date: {}\n        });\n      } catch (error) {\n        return res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    default:\n      return res.status(400).json({\n        success: false\n      });\n      break;\n  }\n});","map":{"version":3,"sources":["D:/NextJs/make/src/pages/api/notes/[id].js"],"names":["dbConnect","Note","req","res","query","id","method","note","findById","status","json","success","date","error","findByIdAndUpdate","body","new","runValidators","deletedNote","deleteOne","_id"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,6BAAtB;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AAEAD,SAAS;AAET,gBAAe,OAAOE,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,QAAM;AACFC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF,KADL;AAEFC,IAAAA;AAFE,MAGFJ,GAHJ;;AAIA,UAAQI,MAAR;AACI,SAAK,KAAL;AACI,UAAI;AACA,cAAMC,IAAI,GAAG,MAAMN,IAAI,CAACO,QAAL,CAAcH,EAAd,CAAnB;;AAEA,YAAI,CAACE,IAAL,EAAW;AACP,iBAAOJ,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAAP;AACH;;AAEDR,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAEL;AAAvB,SAArB;AACH,OARD,CAQE,OAAOM,KAAP,EAAc;AACZ,eAAOV,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB,CAAP;AACH;;AACD;;AACJ,SAAK,KAAL;AACI,UAAI;AACA,cAAMJ,IAAI,GAAG,MAAMN,IAAI,CAACa,iBAAL,CAAuBT,EAAvB,EAA2BH,GAAG,CAACa,IAA/B,EAAqC;AACpDC,UAAAA,GAAG,EAAE,IAD+C;AAEpDC,UAAAA,aAAa,EAAE;AAFqC,SAArC,CAAnB;;AAKA,YAAI,CAACV,IAAL,EAAW;AACP,iBAAOJ,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAAP;AACH;;AAEDR,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAEL;AAAvB,SAArB;AACH,OAXD,CAWE,OAAOM,KAAP,EAAc;AACZ,eAAOV,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB,CAAP;AACH;;AACD;;AACJ,SAAK,QAAL;AACI,UAAI;AACA,cAAMO,WAAW,GAAG,MAAMjB,IAAI,CAACkB,SAAL,CAAe;AAAEC,UAAAA,GAAG,EAAEf;AAAP,SAAf,CAA1B;;AAEA,YAAI,CAACa,WAAL,EAAkB;AACd,iBAAOf,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAAP;AACH;;AAEDR,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAE;AAAvB,SAArB;AACH,OARD,CAQE,OAAOC,KAAP,EAAc;AACZ,eAAOV,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB,CAAP;AACH;;AACD;;AACJ;AACI,aAAOR,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB,CAAP;AACA;AA7CR;AA+CH,CApDD","sourcesContent":["import dbConnect from '../../../../utils/dbConnect';\r\nimport Note from '../../../../models/Note';\r\n\r\ndbConnect();\r\n\r\nexport default async (req, res) => {\r\n    const {\r\n        query: { id },\r\n        method\r\n    } = req;\r\n    switch (method) {\r\n        case 'GET':\r\n            try {\r\n                const note = await Note.findById(id);\r\n\r\n                if (!note) {\r\n                    return res.status(400).json({ success: false });\r\n                }\r\n\r\n                res.status(200).json({ success: true, date: note });\r\n            } catch (error) {\r\n                return res.status(400).json({ success: false });\r\n            }\r\n            break;\r\n        case 'PUT':\r\n            try {\r\n                const note = await Note.findByIdAndUpdate(id, req.body, {\r\n                    new: true,\r\n                    runValidators: true\r\n                });\r\n\r\n                if (!note) {\r\n                    return res.status(400).json({ success: false });\r\n                }\r\n\r\n                res.status(200).json({ success: true, date: note });\r\n            } catch (error) {\r\n                return res.status(400).json({ success: false });\r\n            }\r\n            break;\r\n        case 'DELETE':\r\n            try {\r\n                const deletedNote = await Note.deleteOne({ _id: id });\r\n\r\n                if (!deletedNote) {\r\n                    return res.status(400).json({ success: false });\r\n                }\r\n\r\n                res.status(200).json({ success: true, date: {} });\r\n            } catch (error) {\r\n                return res.status(400).json({ success: false });\r\n            }\r\n            break;\r\n        default:\r\n            return res.status(400).json({ success: false });\r\n            break;\r\n    }\r\n}   "]},"metadata":{},"sourceType":"module"}