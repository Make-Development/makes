{"ast":null,"code":"import { ApolloServer, gql } from 'apollo-server-micro';\nimport { makeExecutableSchema } from 'graphql-tools';\nimport { MongoClient } from 'mongodb';\nimport mongoose from 'mongoose';\nimport httpHeadersPlugin from 'apollo-server-plugin-http-headers';\nimport User from '../../../models/User';\nimport NextAuth from 'next-auth';\nimport jwt from 'jsonwebtoken';\nconst typeDefs = gql`\n  type User {\n    id: ID!\n    firstName: String!\n    lastName: String!\n    blog: String\n  }\n\n  type Query {\n    users: [User]!\n  }\n`;\nconst resolvers = {\n  Query: {\n    users: () => User.find({})\n  }\n};\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers\n});\nlet db;\nconst apolloServer = new ApolloServer({\n  schema,\n  plugins: [httpHeadersPlugin],\n  context: async ({\n    req\n  }) => {\n    var _req$headers$authoriz;\n\n    // Header is in form 'Bearer <token>', grabbing the part after ' '\n    const token = ((_req$headers$authoriz = req.headers.authorization) === null || _req$headers$authoriz === void 0 ? void 0 : _req$headers$authoriz.split(' ')[1]) || undefined; // Initialise as empty arrays - resolvers will add items if required\n\n    const setCookies = [];\n    const setHeaders = [];\n    console.log(setCookies);\n    console.log(setHeaders);\n    console.log(token);\n\n    try {\n      const {\n        user\n      } = jwt.verify(token, process.env.JWT_SECRET);\n      return {\n        req,\n        setCookies,\n        setHeaders,\n        user\n      };\n    } catch (error) {\n      return {\n        setCookies,\n        setHeaders,\n        req\n      };\n    }\n  }\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nconst apollo = apolloServer.createHandler({\n  path: '/api/graphql'\n});\nexport default apollo;","map":{"version":3,"sources":["D:/NextJs/make/src/pages/api/graphql.js"],"names":["ApolloServer","gql","makeExecutableSchema","MongoClient","mongoose","httpHeadersPlugin","User","NextAuth","jwt","typeDefs","resolvers","Query","users","find","schema","db","apolloServer","plugins","context","req","token","headers","authorization","split","undefined","setCookies","setHeaders","console","log","user","verify","process","env","JWT_SECRET","error","config","api","bodyParser","apollo","createHandler","path"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,GAAvB,QAAkC,qBAAlC;AACA,SAASC,oBAAT,QAAqC,eAArC;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,iBAAP,MAA8B,mCAA9B;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,MAAMC,QAAQ,GAAGR,GAAI;;;;;;;;;;;CAArB;AAcA,MAAMS,SAAS,GAAG;AACdC,EAAAA,KAAK,EAAE;AACHC,IAAAA,KAAK,EAAE,MAAMN,IAAI,CAACO,IAAL,CAAU,EAAV;AADV;AADO,CAAlB;AAOA,MAAMC,MAAM,GAAGZ,oBAAoB,CAAC;AAChCO,EAAAA,QADgC;AAEhCC,EAAAA;AAFgC,CAAD,CAAnC;AAKA,IAAIK,EAAJ;AAEA,MAAMC,YAAY,GAAG,IAAIhB,YAAJ,CAAiB;AAClCc,EAAAA,MADkC;AAElCG,EAAAA,OAAO,EAAE,CAACZ,iBAAD,CAFyB;AAGlCa,EAAAA,OAAO,EAAE,OAAO;AAAEC,IAAAA;AAAF,GAAP,KAAmB;AAAA;;AACxB;AACA,UAAMC,KAAK,GAAG,0BAAAD,GAAG,CAACE,OAAJ,CAAYC,aAAZ,gFAA2BC,KAA3B,CAAiC,GAAjC,EAAsC,CAAtC,MAA4CC,SAA1D,CAFwB,CAIxB;;AACA,UAAMC,UAAU,GAAG,EAAnB;AACA,UAAMC,UAAU,GAAG,EAAnB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;;AACA,QAAI;AAGF,YAAM;AAAES,QAAAA;AAAF,UAAWrB,GAAG,CAACsB,MAAJ,CAAWV,KAAX,EAAkBW,OAAO,CAACC,GAAR,CAAYC,UAA9B,CAAjB;AACA,aAAO;AAAEd,QAAAA,GAAF;AAAOM,QAAAA,UAAP;AAAmBC,QAAAA,UAAnB;AAA+BG,QAAAA;AAA/B,OAAP;AACD,KALD,CAKE,OAAOK,KAAP,EAAc;AACd,aAAO;AAAET,QAAAA,UAAF;AAAcC,QAAAA,UAAd;AAA0BP,QAAAA;AAA1B,OAAP;AACD;AACF;AAtB+B,CAAjB,CAArB;AA2BA,OAAO,MAAMgB,MAAM,GAAG;AAClBC,EAAAA,GAAG,EAAE;AACDC,IAAAA,UAAU,EAAE;AADX;AADa,CAAf;AAMP,MAAMC,MAAM,GAAGtB,YAAY,CAACuB,aAAb,CAA2B;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAA3B,CAAf;AAEA,eAAeF,MAAf","sourcesContent":["import { ApolloServer, gql } from 'apollo-server-micro'\r\nimport { makeExecutableSchema } from 'graphql-tools'\r\nimport { MongoClient } from 'mongodb'\r\nimport mongoose from 'mongoose';\r\nimport httpHeadersPlugin from 'apollo-server-plugin-http-headers';\r\nimport User from '../../../models/User';\r\nimport NextAuth from 'next-auth'\r\nimport jwt from 'jsonwebtoken';\r\n\r\nconst typeDefs = gql`\r\n  type User {\r\n    id: ID!\r\n    firstName: String!\r\n    lastName: String!\r\n    blog: String\r\n  }\r\n\r\n  type Query {\r\n    users: [User]!\r\n  }\r\n`;\r\n\r\n\r\nconst resolvers = {\r\n    Query: {\r\n        users: () => User.find({}),\r\n    },\r\n};\r\n\r\n\r\nconst schema = makeExecutableSchema({\r\n    typeDefs,\r\n    resolvers,\r\n})\r\n\r\nlet db\r\n\r\nconst apolloServer = new ApolloServer({\r\n    schema,\r\n    plugins: [httpHeadersPlugin],\r\n    context: async ({ req }) => {\r\n        // Header is in form 'Bearer <token>', grabbing the part after ' '\r\n        const token = req.headers.authorization?.split(' ')[1] || undefined;\r\n     \r\n        // Initialise as empty arrays - resolvers will add items if required\r\n        const setCookies = [];\r\n        const setHeaders = [];\r\n\r\n        console.log(setCookies)\r\n        console.log(setHeaders)\r\n        console.log(token)\r\n        try {\r\n      \r\n         \r\n          const { user } = jwt.verify(token, process.env.JWT_SECRET);\r\n          return { req, setCookies, setHeaders, user };\r\n        } catch (error) {\r\n          return { setCookies, setHeaders, req };\r\n        }\r\n      },\r\n})\r\n\r\n\r\n\r\nexport const config = {\r\n    api: {\r\n        bodyParser: false,\r\n    },\r\n}\r\n\r\nconst apollo = apolloServer.createHandler({ path: '/api/graphql' });\r\n\r\nexport default apollo"]},"metadata":{},"sourceType":"module"}