{"ast":null,"code":"import { ApolloServer, gql } from 'apollo-server-micro';\nimport { makeExecutableSchema } from 'graphql-tools';\nimport { MongoClient } from 'mongodb';\nimport mongoose from 'mongoose';\nimport httpHeadersPlugin from 'apollo-server-plugin-http-headers';\nimport User from '../../../models/User';\nimport NextAuth from 'next-auth';\nconst typeDefs = gql`\n  type User {\n    id: ID!\n    firstName: String!\n    lastName: String!\n    blog: String\n  }\n\n  type Query {\n    users: [User]!\n  }\n`;\nconst resolvers = {\n  Query: {\n    users: () => User.find({})\n  }\n};\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers\n});\nlet db;\nconst apolloServer = new ApolloServer({\n  schema,\n  plugins: [httpHeadersPlugin]\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nconst apollo = apolloServer.createHandler({\n  path: '/api/graphql'\n});\nexport default apollo;","map":{"version":3,"sources":["D:/NextJs/make/src/pages/api/graphql.js"],"names":["ApolloServer","gql","makeExecutableSchema","MongoClient","mongoose","httpHeadersPlugin","User","NextAuth","typeDefs","resolvers","Query","users","find","schema","db","apolloServer","plugins","config","api","bodyParser","apollo","createHandler","path"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,GAAvB,QAAkC,qBAAlC;AACA,SAASC,oBAAT,QAAqC,eAArC;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,iBAAP,MAA8B,mCAA9B;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAGA,MAAMC,QAAQ,GAAGP,GAAI;;;;;;;;;;;CAArB;AAcA,MAAMQ,SAAS,GAAG;AACdC,EAAAA,KAAK,EAAE;AACHC,IAAAA,KAAK,EAAE,MAAML,IAAI,CAACM,IAAL,CAAU,EAAV;AADV;AADO,CAAlB;AAOA,MAAMC,MAAM,GAAGX,oBAAoB,CAAC;AAChCM,EAAAA,QADgC;AAEhCC,EAAAA;AAFgC,CAAD,CAAnC;AAKA,IAAIK,EAAJ;AAEA,MAAMC,YAAY,GAAG,IAAIf,YAAJ,CAAiB;AAClCa,EAAAA,MADkC;AAElCG,EAAAA,OAAO,EAAE,CAACX,iBAAD;AAFyB,CAAjB,CAArB;AAMA,OAAO,MAAMY,MAAM,GAAG;AAClBC,EAAAA,GAAG,EAAE;AACDC,IAAAA,UAAU,EAAE;AADX;AADa,CAAf;AAMP,MAAMC,MAAM,GAAGL,YAAY,CAACM,aAAb,CAA2B;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAA3B,CAAf;AAEA,eAAeF,MAAf","sourcesContent":["import { ApolloServer, gql } from 'apollo-server-micro'\r\nimport { makeExecutableSchema } from 'graphql-tools'\r\nimport { MongoClient } from 'mongodb'\r\nimport mongoose from 'mongoose';\r\nimport httpHeadersPlugin from 'apollo-server-plugin-http-headers';\r\nimport User from '../../../models/User';\r\nimport NextAuth from 'next-auth'\r\n\r\n\r\nconst typeDefs = gql`\r\n  type User {\r\n    id: ID!\r\n    firstName: String!\r\n    lastName: String!\r\n    blog: String\r\n  }\r\n\r\n  type Query {\r\n    users: [User]!\r\n  }\r\n`;\r\n\r\n\r\nconst resolvers = {\r\n    Query: {\r\n        users: () => User.find({}),\r\n    },\r\n};\r\n\r\n\r\nconst schema = makeExecutableSchema({\r\n    typeDefs,\r\n    resolvers,\r\n})\r\n\r\nlet db\r\n\r\nconst apolloServer = new ApolloServer({\r\n    schema,\r\n    plugins: [httpHeadersPlugin],\r\n})\r\n\r\n\r\nexport const config = {\r\n    api: {\r\n        bodyParser: false,\r\n    },\r\n}\r\n\r\nconst apollo = apolloServer.createHandler({ path: '/api/graphql' });\r\n\r\nexport default apollo"]},"metadata":{},"sourceType":"module"}