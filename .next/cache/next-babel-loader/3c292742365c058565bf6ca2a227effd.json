{"ast":null,"code":"import { ApolloServer, gql } from 'apollo-server-micro';\nimport { makeExecutableSchema } from 'graphql-tools';\nimport { MongoClient } from 'mongodb';\nimport mongoose from 'mongoose';\nimport httpHeadersPlugin from 'apollo-server-plugin-http-headers';\nimport User from '../../../models/User';\nconst typeDefs = gql`\n  type User {\n    id: ID!\n    firstName: String!\n    lastName: String!\n    blog: String\n  }\n\n  type Query {\n    users: [User]!\n  }\n`;\nconst userssss = [{\n  firstName: 'Harry Potter',\n  lastName: 'harry@potter.com',\n  blog: \"asdfasdf\",\n  id: 23\n}, {\n  firstName: 'Jurassic Park',\n  lastName: 'michael@crichton.com',\n  blog: \"asdfasdf\",\n  id: 34\n}];\nconst users = User.find({});\nconsole.log(users);\nconst resolvers = {\n  Query: {\n    users: () => users\n  }\n};\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers\n});\nlet db;\nconst apolloServer = new ApolloServer({\n  schema,\n  context: async () => {\n    if (!db) {\n      try {\n        db = await mongoose.connect(process.env.MONGO_URI, {\n          useNewUrlParser: true,\n          useUnifiedTopology: true\n        });\n      } catch (e) {\n        console.log('--->error while connecting with graphql context (db)', e);\n      }\n    }\n\n    return {\n      db\n    };\n  }\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nconst apollo = apolloServer.createHandler({\n  path: '/api/graphql'\n});\nexport default apollo;","map":{"version":3,"sources":["D:/NextJs/make/src/pages/api/graphql.js"],"names":["ApolloServer","gql","makeExecutableSchema","MongoClient","mongoose","httpHeadersPlugin","User","typeDefs","userssss","firstName","lastName","blog","id","users","find","console","log","resolvers","Query","schema","db","apolloServer","context","connect","process","env","MONGO_URI","useNewUrlParser","useUnifiedTopology","e","config","api","bodyParser","apollo","createHandler","path"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,GAAvB,QAAkC,qBAAlC;AACA,SAASC,oBAAT,QAAqC,eAArC;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,iBAAP,MAA8B,mCAA9B;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AAGA,MAAMC,QAAQ,GAAGN,GAAI;;;;;;;;;;;CAArB;AAcA,MAAMO,QAAQ,GAAG,CAAC;AACdC,EAAAA,SAAS,EAAE,cADG;AAEdC,EAAAA,QAAQ,EAAE,kBAFI;AAGdC,EAAAA,IAAI,EAAE,UAHQ;AAIdC,EAAAA,EAAE,EAAE;AAJU,CAAD,EAMjB;AACIH,EAAAA,SAAS,EAAE,eADf;AAEIC,EAAAA,QAAQ,EAAE,sBAFd;AAGIC,EAAAA,IAAI,EAAE,UAHV;AAIIC,EAAAA,EAAE,EAAE;AAJR,CANiB,CAAjB;AAaA,MAAMC,KAAK,GAAIP,IAAI,CAACQ,IAAL,CAAU,EAAV,CAAf;AACAC,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAEA,MAAMI,SAAS,GAAG;AACdC,EAAAA,KAAK,EAAE;AACHL,IAAAA,KAAK,EAAE,MAAMA;AADV;AADO,CAAlB;AAOA,MAAMM,MAAM,GAAGjB,oBAAoB,CAAC;AAChCK,EAAAA,QADgC;AAEhCU,EAAAA;AAFgC,CAAD,CAAnC;AAMA,IAAIG,EAAJ;AAEA,MAAMC,YAAY,GAAG,IAAIrB,YAAJ,CAAiB;AAClCmB,EAAAA,MADkC;AAElCG,EAAAA,OAAO,EAAE,YAAY;AACjB,QAAI,CAACF,EAAL,EAAS;AACL,UAAI;AAEAA,QAAAA,EAAE,GAAG,MAAMhB,QAAQ,CAACmB,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,SAA7B,EAAwC;AAC/CC,UAAAA,eAAe,EAAE,IAD8B;AAE/CC,UAAAA,kBAAkB,EAAE;AAF2B,SAAxC,CAAX;AAMH,OARD,CAQE,OAAOC,CAAP,EAAU;AACRd,QAAAA,OAAO,CAACC,GAAR,CAAY,sDAAZ,EAAoEa,CAApE;AACH;AACJ;;AAED,WAAO;AAAET,MAAAA;AAAF,KAAP;AACH;AAlBiC,CAAjB,CAArB;AAsBA,OAAO,MAAMU,MAAM,GAAG;AAClBC,EAAAA,GAAG,EAAE;AACDC,IAAAA,UAAU,EAAE;AADX;AADa,CAAf;AAMP,MAAMC,MAAM,GAAGZ,YAAY,CAACa,aAAb,CAA2B;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAA3B,CAAf;AAEA,eAAeF,MAAf","sourcesContent":["import { ApolloServer, gql } from 'apollo-server-micro'\r\nimport { makeExecutableSchema } from 'graphql-tools'\r\nimport { MongoClient } from 'mongodb'\r\nimport mongoose from 'mongoose';\r\nimport httpHeadersPlugin from 'apollo-server-plugin-http-headers';\r\nimport User from '../../../models/User';\r\n\r\n\r\nconst typeDefs = gql`\r\n  type User {\r\n    id: ID!\r\n    firstName: String!\r\n    lastName: String!\r\n    blog: String\r\n  }\r\n\r\n  type Query {\r\n    users: [User]!\r\n  }\r\n`\r\n\r\n\r\nconst userssss = [{\r\n    firstName: 'Harry Potter',\r\n    lastName: 'harry@potter.com',\r\n    blog: \"asdfasdf\",\r\n    id: 23,\r\n},\r\n{\r\n    firstName: 'Jurassic Park',\r\n    lastName: 'michael@crichton.com',\r\n    blog: \"asdfasdf\",\r\n    id: 34\r\n}];\r\n\r\nconst users =  User.find({});\r\nconsole.log(users)\r\n\r\nconst resolvers = {\r\n    Query: {\r\n        users: () => users,\r\n    },\r\n};\r\n\r\n\r\nconst schema = makeExecutableSchema({\r\n    typeDefs,\r\n    resolvers,\r\n})\r\n\r\n\r\nlet db\r\n\r\nconst apolloServer = new ApolloServer({\r\n    schema,\r\n    context: async () => {\r\n        if (!db) {\r\n            try {\r\n\r\n                db = await mongoose.connect(process.env.MONGO_URI, {\r\n                    useNewUrlParser: true,\r\n                    useUnifiedTopology: true\r\n                });\r\n\r\n\r\n            } catch (e) {\r\n                console.log('--->error while connecting with graphql context (db)', e)\r\n            }\r\n        }\r\n\r\n        return { db }\r\n    },\r\n})\r\n\r\n\r\nexport const config = {\r\n    api: {\r\n        bodyParser: false,\r\n    },\r\n}\r\n\r\nconst apollo = apolloServer.createHandler({ path: '/api/graphql' });\r\n\r\nexport default apollo"]},"metadata":{},"sourceType":"module"}