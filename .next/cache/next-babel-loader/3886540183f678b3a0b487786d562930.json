{"ast":null,"code":"import { ApolloServer, gql } from 'apollo-server-micro';\nimport { makeExecutableSchema } from 'graphql-tools';\nimport { MongoClient } from 'mongodb';\nimport mongoose from 'mongoose';\nimport httpHeadersPlugin from 'apollo-server-plugin-http-headers';\nconst typeDefs = gql`\n  type User {\n    id: ID!\n    firstName: String!\n    lastName: String!\n    blog: String\n  }\n\n  type Query {\n    users: [User]!\n  }\n`;\n\nconst jwt = require('jsonwebtoken');\n\nconst decodedToken = (req, requireAuth = true) => {\n  const header = req.req.headers.authorization;\n\n  if (header) {\n    const token = header.replace('Bearer ', '');\n    const decoded = jwt.verify(token, 'supersecret');\n    return decoded;\n  }\n\n  if (requireAuth) {\n    throw new Error('Login in to access resource');\n  }\n\n  return null;\n};\n\nconst resolvers = {\n  Query: {\n    users(_parent, _args, _context) {\n      return _context.db.collection('users').findOne().then(data => {\n        return data.users;\n      });\n    }\n\n  }\n};\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers\n});\nlet db;\nconst apolloServer = new ApolloServer({\n  schema,\n  context: async () => {\n    if (!db) {\n      try {\n        db = await mongoose.connect(process.env.MONGO_URI, {\n          useNewUrlParser: true,\n          useUnifiedTopology: true\n        });\n      } catch (e) {\n        console.log('--->error while connecting with graphql context (db)', e);\n      }\n    }\n\n    return {\n      db\n    };\n  }\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nconst apollo = apolloServer.createHandler({\n  path: '/api/graphql'\n});\nexport default apollo;","map":{"version":3,"sources":["D:/NextJs/make/src/pages/api/graphql.js"],"names":["ApolloServer","gql","makeExecutableSchema","MongoClient","mongoose","httpHeadersPlugin","typeDefs","jwt","require","decodedToken","req","requireAuth","header","headers","authorization","token","replace","decoded","verify","Error","resolvers","Query","users","_parent","_args","_context","db","collection","findOne","then","data","schema","apolloServer","context","connect","process","env","MONGO_URI","useNewUrlParser","useUnifiedTopology","e","console","log","config","api","bodyParser","apollo","createHandler","path"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,GAAvB,QAAkC,qBAAlC;AACA,SAASC,oBAAT,QAAqC,eAArC;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,iBAAP,MAA8B,mCAA9B;AAGA,MAAMC,QAAQ,GAAGL,GAAI;;;;;;;;;;;CAArB;;AAYA,MAAMM,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAMC,YAAY,GAAG,CAACC,GAAD,EAAMC,WAAW,GAAG,IAApB,KAA6B;AAChD,QAAMC,MAAM,GAAIF,GAAG,CAACA,GAAJ,CAAQG,OAAR,CAAgBC,aAAhC;;AAEA,MAAIF,MAAJ,EAAW;AACT,UAAMG,KAAK,GAAGH,MAAM,CAACI,OAAP,CAAe,SAAf,EAA0B,EAA1B,CAAd;AACA,UAAMC,OAAO,GAAGV,GAAG,CAACW,MAAJ,CAAWH,KAAX,EAAkB,aAAlB,CAAhB;AACA,WAAOE,OAAP;AACD;;AACD,MAAIN,WAAJ,EAAiB;AACf,UAAM,IAAIQ,KAAJ,CAAU,6BAAV,CAAN;AACD;;AACD,SAAO,IAAP;AACD,CAZD;;AAaA,MAAMC,SAAS,GAAG;AACdC,EAAAA,KAAK,EAAE;AACHC,IAAAA,KAAK,CAACC,OAAD,EAAUC,KAAV,EAAiBC,QAAjB,EAA2B;AAC5B,aAAOA,QAAQ,CAACC,EAAT,CACFC,UADE,CACS,OADT,EAEFC,OAFE,GAGFC,IAHE,CAGIC,IAAD,IAAU;AACZ,eAAOA,IAAI,CAACR,KAAZ;AACH,OALE,CAAP;AAMH;;AARE;AADO,CAAlB;AAaA,MAAMS,MAAM,GAAG7B,oBAAoB,CAAC;AAChCI,EAAAA,QADgC;AAEhCc,EAAAA;AAFgC,CAAD,CAAnC;AAMA,IAAIM,EAAJ;AAEA,MAAMM,YAAY,GAAG,IAAIhC,YAAJ,CAAiB;AAClC+B,EAAAA,MADkC;AAElCE,EAAAA,OAAO,EAAE,YAAY;AACjB,QAAI,CAACP,EAAL,EAAS;AACL,UAAI;AAEAA,QAAAA,EAAE,GAAG,MAAMtB,QAAQ,CAAC8B,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,SAA7B,EAAwC;AAC/CC,UAAAA,eAAe,EAAE,IAD8B;AAE/CC,UAAAA,kBAAkB,EAAE;AAF2B,SAAxC,CAAX;AAMH,OARD,CAQE,OAAOC,CAAP,EAAU;AACRC,QAAAA,OAAO,CAACC,GAAR,CAAY,sDAAZ,EAAoEF,CAApE;AACH;AACJ;;AAED,WAAO;AAAEd,MAAAA;AAAF,KAAP;AACH;AAlBiC,CAAjB,CAArB;AAsBA,OAAO,MAAMiB,MAAM,GAAG;AAClBC,EAAAA,GAAG,EAAE;AACDC,IAAAA,UAAU,EAAE;AADX;AADa,CAAf;AAMP,MAAMC,MAAM,GAAGd,YAAY,CAACe,aAAb,CAA2B;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAA3B,CAAf;AAEA,eAAeF,MAAf","sourcesContent":["import { ApolloServer, gql } from 'apollo-server-micro'\r\nimport { makeExecutableSchema } from 'graphql-tools'\r\nimport { MongoClient } from 'mongodb'\r\nimport mongoose from 'mongoose';\r\nimport httpHeadersPlugin from 'apollo-server-plugin-http-headers';\r\n\r\n\r\nconst typeDefs = gql`\r\n  type User {\r\n    id: ID!\r\n    firstName: String!\r\n    lastName: String!\r\n    blog: String\r\n  }\r\n\r\n  type Query {\r\n    users: [User]!\r\n  }\r\n`\r\nconst jwt = require('jsonwebtoken');\r\nconst decodedToken = (req, requireAuth = true) => {\r\n  const header =  req.req.headers.authorization;\r\n    \r\n  if (header){\r\n    const token = header.replace('Bearer ', '');\r\n    const decoded = jwt.verify(token, 'supersecret');\r\n    return decoded;\r\n  }\r\n  if (requireAuth) {\r\n    throw new Error('Login in to access resource');\r\n  } \r\n  return null\r\n}\r\nconst resolvers = {\r\n    Query: {\r\n        users(_parent, _args, _context) {\r\n            return _context.db\r\n                .collection('users')\r\n                .findOne()\r\n                .then((data) => {\r\n                    return data.users\r\n                })\r\n        },\r\n    },\r\n}\r\n\r\nconst schema = makeExecutableSchema({\r\n    typeDefs,\r\n    resolvers,\r\n})\r\n\r\n\r\nlet db\r\n\r\nconst apolloServer = new ApolloServer({\r\n    schema,\r\n    context: async () => {\r\n        if (!db) {\r\n            try {\r\n\r\n                db = await mongoose.connect(process.env.MONGO_URI, {\r\n                    useNewUrlParser: true,\r\n                    useUnifiedTopology: true\r\n                });\r\n\r\n\r\n            } catch (e) {\r\n                console.log('--->error while connecting with graphql context (db)', e)\r\n            }\r\n        }\r\n\r\n        return { db }\r\n    },\r\n})\r\n\r\n\r\nexport const config = {\r\n    api: {\r\n        bodyParser: false,\r\n    },\r\n}\r\n\r\nconst apollo = apolloServer.createHandler({ path: '/api/graphql' });\r\n\r\nexport default apollo"]},"metadata":{},"sourceType":"module"}