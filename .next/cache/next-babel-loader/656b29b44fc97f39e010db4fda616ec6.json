{"ast":null,"code":"import { ApolloServer, gql } from 'apollo-server-micro';\nimport { makeExecutableSchema } from 'graphql-tools';\nimport { MongoClient } from 'mongodb';\nimport mongoose from 'mongoose';\nimport httpHeadersPlugin from 'apollo-server-plugin-http-headers';\nimport User from '../../../models/User';\nimport NextAuth from 'next-auth';\nimport jwt from 'jsonwebtoken';\nconst typeDefs = gql`\n  type User {\n    id: ID!\n    firstName: String!\n    lastName: String!\n    blog: String\n  }\n\n  type Query {\n    users: [User]!\n  }\n`;\nconst resolvers = {\n  Query: {\n    users: () => User.find({})\n  }\n};\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers\n});\nconst REFRESH_TOKEN_COOKIE_OPTIONS = {\n  // Get part after // and before : (in case port number in URL)\n  // E.g. <http://localhost:3000> becomes localhost\n  domain: process.env.BASE_URL.split('//')[1].split(':')[0],\n  httpOnly: true,\n  path: '/',\n  sameSite: true,\n  // Allow non-secure cookies only in development environment without HTTPS\n  secure: !!process.env.BASE_URL.includes('https')\n};\nconsole.log(REFRESH_TOKEN_COOKIE_OPTIONS);\nlet db;\nconst apolloServer = new ApolloServer({\n  schema,\n  plugins: [httpHeadersPlugin],\n  context: async ({\n    req\n  }) => {\n    var _req$headers$authoriz;\n\n    // Header is in form 'Bearer <token>', grabbing the part after ' '\n    const token = ((_req$headers$authoriz = req.headers.authorization) === null || _req$headers$authoriz === void 0 ? void 0 : _req$headers$authoriz.split(' ')[1]) || undefined; // Initialise as empty arrays - resolvers will add items if required\n\n    const setCookies = [];\n    const setHeaders = [];\n\n    try {\n      const {\n        user\n      } = jwt.verify(token, process.env.JWT_SECRET);\n      return {\n        req,\n        setCookies,\n        setHeaders,\n        user\n      };\n    } catch (error) {\n      return {\n        setCookies,\n        setHeaders,\n        req\n      };\n    }\n  }\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nconst apollo = apolloServer.createHandler({\n  path: '/api/graphql'\n});\nexport default apollo;","map":{"version":3,"sources":["D:/NextJs/make/src/pages/api/graphql.js"],"names":["ApolloServer","gql","makeExecutableSchema","MongoClient","mongoose","httpHeadersPlugin","User","NextAuth","jwt","typeDefs","resolvers","Query","users","find","schema","REFRESH_TOKEN_COOKIE_OPTIONS","domain","process","env","BASE_URL","split","httpOnly","path","sameSite","secure","includes","console","log","db","apolloServer","plugins","context","req","token","headers","authorization","undefined","setCookies","setHeaders","user","verify","JWT_SECRET","error","config","api","bodyParser","apollo","createHandler"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,GAAvB,QAAkC,qBAAlC;AACA,SAASC,oBAAT,QAAqC,eAArC;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,iBAAP,MAA8B,mCAA9B;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,MAAMC,QAAQ,GAAGR,GAAI;;;;;;;;;;;CAArB;AAcA,MAAMS,SAAS,GAAG;AACdC,EAAAA,KAAK,EAAE;AACHC,IAAAA,KAAK,EAAE,MAAMN,IAAI,CAACO,IAAL,CAAU,EAAV;AADV;AADO,CAAlB;AAOA,MAAMC,MAAM,GAAGZ,oBAAoB,CAAC;AAChCO,EAAAA,QADgC;AAEhCC,EAAAA;AAFgC,CAAD,CAAnC;AAKA,MAAMK,4BAA4B,GAAG;AACjC;AACA;AACAC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,CAAqBC,KAArB,CAA2B,IAA3B,EAAiC,CAAjC,EAAoCA,KAApC,CAA0C,GAA1C,EAA+C,CAA/C,CAHyB;AAIjCC,EAAAA,QAAQ,EAAE,IAJuB;AAKjCC,EAAAA,IAAI,EAAE,GAL2B;AAMjCC,EAAAA,QAAQ,EAAE,IANuB;AAOjC;AACAC,EAAAA,MAAM,EAAE,CAAC,CAACP,OAAO,CAACC,GAAR,CAAYC,QAAZ,CAAqBM,QAArB,CAA8B,OAA9B;AARuB,CAArC;AAUEC,OAAO,CAACC,GAAR,CAAYZ,4BAAZ;AAEF,IAAIa,EAAJ;AAEA,MAAMC,YAAY,GAAG,IAAI7B,YAAJ,CAAiB;AAClCc,EAAAA,MADkC;AAElCgB,EAAAA,OAAO,EAAE,CAACzB,iBAAD,CAFyB;AAGlC0B,EAAAA,OAAO,EAAE,OAAO;AAAEC,IAAAA;AAAF,GAAP,KAAmB;AAAA;;AACxB;AACA,UAAMC,KAAK,GAAG,0BAAAD,GAAG,CAACE,OAAJ,CAAYC,aAAZ,gFAA2Bf,KAA3B,CAAiC,GAAjC,EAAsC,CAAtC,MAA4CgB,SAA1D,CAFwB,CAIxB;;AACA,UAAMC,UAAU,GAAG,EAAnB;AACA,UAAMC,UAAU,GAAG,EAAnB;;AAEA,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAW/B,GAAG,CAACgC,MAAJ,CAAWP,KAAX,EAAkBhB,OAAO,CAACC,GAAR,CAAYuB,UAA9B,CAAjB;AAEA,aAAO;AAAET,QAAAA,GAAF;AAAOK,QAAAA,UAAP;AAAmBC,QAAAA,UAAnB;AAA+BC,QAAAA;AAA/B,OAAP;AACD,KAJD,CAIE,OAAOG,KAAP,EAAc;AACd,aAAO;AAAEL,QAAAA,UAAF;AAAcC,QAAAA,UAAd;AAA0BN,QAAAA;AAA1B,OAAP;AACD;AACF;AAlB+B,CAAjB,CAArB;AAuBA,OAAO,MAAMW,MAAM,GAAG;AAClBC,EAAAA,GAAG,EAAE;AACDC,IAAAA,UAAU,EAAE;AADX;AADa,CAAf;AAMP,MAAMC,MAAM,GAAGjB,YAAY,CAACkB,aAAb,CAA2B;AAAEzB,EAAAA,IAAI,EAAE;AAAR,CAA3B,CAAf;AAEA,eAAewB,MAAf","sourcesContent":["import { ApolloServer, gql } from 'apollo-server-micro'\r\nimport { makeExecutableSchema } from 'graphql-tools'\r\nimport { MongoClient } from 'mongodb'\r\nimport mongoose from 'mongoose';\r\nimport httpHeadersPlugin from 'apollo-server-plugin-http-headers';\r\nimport User from '../../../models/User';\r\nimport NextAuth from 'next-auth'\r\nimport jwt from 'jsonwebtoken';\r\n\r\nconst typeDefs = gql`\r\n  type User {\r\n    id: ID!\r\n    firstName: String!\r\n    lastName: String!\r\n    blog: String\r\n  }\r\n\r\n  type Query {\r\n    users: [User]!\r\n  }\r\n`;\r\n\r\n\r\nconst resolvers = {\r\n    Query: {\r\n        users: () => User.find({}),\r\n    },\r\n};\r\n\r\n\r\nconst schema = makeExecutableSchema({\r\n    typeDefs,\r\n    resolvers,\r\n})\r\n\r\nconst REFRESH_TOKEN_COOKIE_OPTIONS = {\r\n    // Get part after // and before : (in case port number in URL)\r\n    // E.g. <http://localhost:3000> becomes localhost\r\n    domain: process.env.BASE_URL.split('//')[1].split(':')[0],\r\n    httpOnly: true,\r\n    path: '/',\r\n    sameSite: true,\r\n    // Allow non-secure cookies only in development environment without HTTPS\r\n    secure: !!process.env.BASE_URL.includes('https'),\r\n  };\r\n  console.log(REFRESH_TOKEN_COOKIE_OPTIONS);\r\n\r\nlet db\r\n\r\nconst apolloServer = new ApolloServer({\r\n    schema,\r\n    plugins: [httpHeadersPlugin],\r\n    context: async ({ req }) => {\r\n        // Header is in form 'Bearer <token>', grabbing the part after ' '\r\n        const token = req.headers.authorization?.split(' ')[1] || undefined;\r\n     \r\n        // Initialise as empty arrays - resolvers will add items if required\r\n        const setCookies = [];\r\n        const setHeaders = [];\r\n       \r\n        try {\r\n          const { user } = jwt.verify(token, process.env.JWT_SECRET);\r\n          \r\n          return { req, setCookies, setHeaders, user };\r\n        } catch (error) {\r\n          return { setCookies, setHeaders, req };\r\n        }\r\n      },\r\n})\r\n\r\n\r\n\r\nexport const config = {\r\n    api: {\r\n        bodyParser: false,\r\n    },\r\n}\r\n\r\nconst apollo = apolloServer.createHandler({ path: '/api/graphql' });\r\n\r\nexport default apollo"]},"metadata":{},"sourceType":"module"}